<?php

namespace shorturl\classes;

class Config {
    // Путь к файлу конфига
    private static $configFilePath = 'config/config.php';

    // Полученное содержание конфига (массив)
    private static $config = array();

    // Полученное значение в конфиге по переданному ключу
    private static $receivedValue;

    // Возвращаемое значение
    private static $response;


    // Получение конфига по указанному пути
    private static function getConfig() : array {
        // Подключаем и возвращаем конфиг (массив) по указанному пути (к файлу конфига)
        return require_once self::$configFilePath;
    }

    // Получаем значение из конфига (массива) по переданному ключу
    private static function getValueOnKey(string $key): void {
        // Если _свойство для хранения полученного значения_ еще пустое
        if (empty(self::$receivedValue))
            // Получаем значение по переданному ключу (из конфига)
            self::$receivedValue = self::$config[$key];
        // Иначе (если есть какое-либо _ранее полученное значение из конфига_)
        else {
            // Если _ранее полученное значение из конфига_ - массив
            // И в этом массиве есть переданный для получения значения ключ
            if (is_array(self::$receivedValue) && array_key_exists($key, self::$receivedValue)) {
                // Получаем новое значение по ключу из ранее полученного значения из конфига
                /*** Обеспечивает получение значений из вложенных массивов в конфиге ***/
                /*** (как рекурсия) ***/
                self::$receivedValue = self::$receivedValue[$key];
            }
        }
        /*** Ничего ен возвращаем,
         * т.к. запись полученных значений происходит в свойство (переменную) класса ***/
    }

    // Открытый метод (интерфейс) для пользователя
    // Возвращает конечное значение из конфига по иерархически переданным ключам (разделенных '.'):

    /*** Можно передать множество вложенных ключей (столько, сколько в конфиге уровней)
     'main.to' - получим 456
     'main' - получим вложенный массив с from и to

     'main' => [
            'from' => 123,
            'to' => 456"
    ] ***/

    // Статический, чтобы можно было получать данные из конфига без создания объекта касса Config
    /*** Работает без создания объекта класса (static), поэтому все остальное тоже статическое (static),
     * т.к. по-другому ни к чему не обратишься ***/
    public static function get(string $strKeys) {
        /*** Получает конфиг только единожды, при первом обращении ***/
        /*** Далее конфиг остается в классе, как и все остальные статические свойства ***/
        // Если конфиг пустой
        if (empty(self::$config))
            // Получаем конфиг
            self::$config = self::getConfig();

        // Разбиваем строку ключей на массив
        // Для каждого ключа
        foreach (explode('.', $strKeys) as $key) {
            // Получаем значение по данному ключу из конфига (массива)

            // Например, если передать ключи - 'main.to', то
            // вначале, во внутреннюю переменную класса,
            // данный метод запишет значение первого ключа 'main' (тоже массив)
            // Далее (по циклу) из записанного массива (main) получит значение по ключу 'to'
            // (подобие рекурсии)
            self::getValueOnKey($key);
        }

        // Далее - добавляем _конечное полученное значение из конфига_ в _переменную для возврата_
        self::$response = self::$receivedValue;

        // Очищаем _полученное значение в конфиге по переданному ключу_
        // (т.к. данное свойство - static, то значение в нем сохраняется при повторном обращении к классу (объектов нет))
        self::$receivedValue = '';

        // Возвращаем массив (промежуточное значение) или _конечное значение из конфига_
        return self::$response;

    }
}

// Config::get('db.name');